.decl edge(a: symbol, b: symbol)
.input edge
.lat node(a: symbol, s: Simple)
.input node
.output node

.enum Simple = {
        case "Top",

    case "yes", case "no",

        case "Bot"
}

.def lub(x: Simple, y: Simple): Simple {
    case ("Bot", _)     => y,
    case (_, "Bot")     => x,
    case ("yes", "yes") => "yes",
    case ("no", "no")   => "no",
    case (_, _)	        => "Top"
}

.def glb(x: Simple, y:Simple): Simple {
    case ("Top", _)     => y,
    case (_, "Top")     => x,
    case ("yes", "yes") => "yes",
    case ("no", "no")   => "no",
    case (_, _)         => "Bot"
}

// assert lattice association
.let Simple<> = ("Bot", "Top", lub, glb)

.lat mini(s: Simple)
mini("no").

.def next(s: Simple): Simple {
    case ("Top") => "Top",
    case ("no") => "yes",
    case ("yes") => "no",
    case (_) => "Bot"
}
.def new(a: Simple, b: Simple): Simple {
    case (_, _) => "Top"
}

node(a, &next(s)) :- edge(b, a), node(b, s).

