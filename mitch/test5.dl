.enum Sign = {
              case "Top",

    case "Neg", case "Zer", case "Pos",

              case "Bot"
}

/// Next, we define all the components that constitute the lattice:


/// The least upper bound relation on the lattice elements.
.def lub(x: Sign, y: Sign): Sign {
    case ("Bot", _)   => y,
    case (_, "Bot")   => x,
    case (_, _)	      => x=y ? x : "Top"
}

/// The greatest lower bound relation on the lattice elements.
.def glb(x: Sign, y: Sign): Sign {
    case ("Top", _)   => y,
    case (_, "Top")   => x,
    case (_, _)	      => x=y ? x : "Bot"
}
.let Sign<> = ("Bot", "Top", lub, glb)


.lat a(n: number, s: Sign)

a(1, "Top").
a(1, "Pos").

a(2, "Pos").
a(2, "Neg").

a(3, "Pos").
a(3, "Bot").

.output a